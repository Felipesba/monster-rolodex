{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-bar/search-bar.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monsters","id","name","email","Cardlist","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchfield","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","monster","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yUAGaA,EAAO,SAAAC,GAAK,OACrB,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,SAASC,GAAzC,4BACtB,mCAAML,EAAMI,SAASE,KAArB,OACA,kCAAKN,EAAMI,SAASG,MAApB,WCFKC,EAAW,SAAAR,GAAK,OAC5B,qBAAKC,UAAU,YAAf,SACID,EAAMI,SAASK,KAAI,SAAAL,GAAQ,OACpB,cAAC,EAAD,CAAwBA,SAAUA,GAAvBA,EAASC,UCLnBK,G,MAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OACzB,uBAAQX,UAAU,SACVY,KAAK,SACLF,YAAaA,EACbG,SAAUF,MCyCHG,E,kDAzCb,aAAc,IAAD,8BACX,gBAYFH,aAAe,SAACI,GACd,EAAKC,SAAS,CAACC,YAAaF,EAAEG,OAAOC,SAZrC,EAAKC,MAAQ,CACXjB,SAAU,GACVc,YAAa,IAJJ,E,qDAOb,WAAqB,IAAD,OAClBI,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAAEb,SAAUsB,S,oBAO7C,WACE,MAAiCC,KAAKN,MAA9BjB,EAAR,EAAQA,SAAUc,EAAlB,EAAkBA,YACZU,EAAmBxB,EAASyB,QAAO,SAAAC,GAAO,OAC9CA,EAAQxB,KAAKyB,cAAcC,SAASd,EAAYa,kBAIpD,OACE,sBAAK9B,UAAU,MAAf,UACE,iDAEA,cAAC,EAAD,CACIU,YAAY,iBACZC,aAAce,KAAKf,eAGvB,cAAC,EAAD,CAAUR,SAAUwB,W,GAlCRK,aCMHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBb,MAAK,YAAkD,IAA/Cc,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.c050987d.chunk.js","sourcesContent":["import React from 'react';\nimport './card.style.css';\n\nexport const Card = props => (\n    <div className='card-container'>\n        <img alt=\"monster\" src={`https://robohash.org/${props.monsters.id}?set=set2&size=180x180`}/>\n        <h2> {props.monsters.name} </h2>\n        <p> {props.monsters.email} </p>\n    </div>\n);\n","import React from 'react';\nimport './card-list.component.style.css';\nimport {Card} from '../card/card.component';\n\n\nexport const Cardlist = props => (\n <div className='card-list'> \n    {props.monsters.map(monsters => (\n            <Card key={monsters.id} monsters={monsters}/>\n        ))}\n </div>\n);  \n\n","import React from 'react';\nimport './search-box.style.css';\n\nexport const SearchBox = ({ placeholder, handleChange }) => (\n<input  className='search'\n        type='search' \n        placeholder={placeholder} \n        onChange={handleChange} \n/>\n);","import React, { Component } from 'react';\nimport './App.css';\nimport {Cardlist} from './components/card-list/card-list.component.jsx';\nimport {SearchBox} from './components/search-bar/search-bar.component.jsx';\n\n\nclass App extends Component {\n  constructor(){\n    super();\n    this.state = {\n      monsters: [],\n      searchfield: \"\"\n    };\n  }\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response => response.json())\n      .then(users => this.setState({ monsters: users }));\n  }\n\n  handleChange = (e) => {\n    this.setState({searchfield: e.target.value });\n  }\n\n  render() {\n    const { monsters, searchfield} = this.state;\n    const filteredMonsters = monsters.filter(monster => \n      monster.name.toLowerCase().includes(searchfield.toLowerCase())\n        );\n  \n    \n  return (\n    <div className=\"App\">\n      <h1>Monster Rolodex</h1>\n  \n      <SearchBox\n          placeholder='Search Monster'\n          handleChange={this.handleChange}\n      />\n    \n      <Cardlist monsters={filteredMonsters}>      \n      </Cardlist>\n    </div>\n    );\n  } \n}\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}